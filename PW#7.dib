#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №7.Реализация потока обработки команад.

**Цель:** Реализовать основу для многопоточного сервера приложений.

**Результаты:** После выполнения работы Вы сможете:
1. Обрабатывать множество операций в несколько потоков.
2. Останавливать потоки по запросу извне.

## Задание.
Пусть операция задана интерфейсом

#!csharp

public interface ICommand
{
    void Execute();
}

#!csharp

#!csharp

using System;
using System.Collections.Concurrent;
using System.Threading;

public class ServerThread
{
    BlockingCollection<ICommand> commands = new BlockingCollection<ICommand>();
    Thread runThread;
    bool isRunning = true;

    public ServerThread()
    {
        isRunning = true;
        runThread = new Thread(Run);
        runThread.Start();
    }

    public void AddCommand(ICommand command)
    {
        if (isRunning)
        {
            commands.Add(command);
        }
    }

    private void Run()
    {
        while (isRunning || commands.Count > 0)
        {
            ICommand command;
            try
            {
                command = commands.Take();
            }
            catch (Exception)
            {
                break;
            }

            try
            {
                command.Execute();
            }
            catch (Exception err)
            {
                Console.WriteLine(err.Message);
            }
        }

        while (commands.TryTake(out var remainingCommand))
        {
            try
            {
                remainingCommand.Execute();
            }
            catch (Exception err)
            {
                Console.WriteLine(err.Message);
            }
        }
    }

    public void HardStop()
    {
        isRunning = false;
        commands.CompleteAdding();
        runThread.Interrupt();
    }

    public void SoftStop()
    {
        isRunning = false;
        commands.CompleteAdding();
    }

    public Thread RunThread()
    {
        return runThread;
    }

    public void WaitForCompletion()
    {
        runThread.Join();
    }
}

public class HardStopCommand : ICommand
{
    private readonly ServerThread serverThread;

    public HardStopCommand(ServerThread serverThread)
    {
        this.serverThread = serverThread;
    }

    public void Execute()
    {
        if (Thread.CurrentThread != serverThread.RunThread())
        {
            throw new Exception("Текущий поток не совпадает с потоком ServerThread");
        }
        serverThread.HardStop();
    }
}

public class SoftStopCommand : ICommand
{
    private readonly ServerThread serverThread;

    public SoftStopCommand(ServerThread serverThread)
    {
        this.serverThread = serverThread;
    }

    public void Execute()
    {
        if (Thread.CurrentThread != serverThread.RunThread())
        {
            throw new Exception("Текущий поток не совпадает с потоком ServerThread");
        }
        serverThread.SoftStop();
    }
}

#!csharp

public static void HardStopTest()
{
    var serverThread = new ServerThread();
    var hardStopCommand = new HardStopCommand(serverThread);

    serverThread.AddCommand(hardStopCommand);
    serverThread.WaitForCompletion();

    if (serverThread.RunThread().IsAlive)
    {
        throw new InvalidOperationException("Поток не завершился");
    }
    else
    {
        Console.WriteLine("HardTest выполнился успешно!");
    }
}

public static void SoftStopTest()
{
    var serverThread = new ServerThread();
    var softStopCommand = new SoftStopCommand(serverThread);

    serverThread.AddCommand(softStopCommand);
    serverThread.WaitForCompletion();

    if (serverThread.RunThread().IsAlive)
    {
        throw new InvalidOperationException("Поток не завершился");
    }
    else
    {
        Console.WriteLine("SoftTest выполнился успешно!");
    }

}

HardStopTest();
SoftStopTest();

#!markdown

Классы, наследующие интерйес ICommand будем называть **Командами.**

Реализовать класс ServerThread и команды по hard и soft завершению потока. 

ServerThread может менять свое поведение для обработки следующей Команды.
Исключение, выброшенное из Команды, перехватывается и передается вместе с самой Командой в ExceptionHandler (см. ЛР №5) Примечание. Наличие реализованного обработчика исключений не обязательно для выполнения данной задачи. 

Команда HardStop приводит к немедленной остановке потока, несмотря на, что в очереди потока есть еще Команды.
Команда  SoftStop останавливает поток, когда в очереди потока закончатся все Команды.

Команды HardStop и SoftStop успешно выполняются только в потоке, который они должны остановить, в противном случае выбрасывают исключение.
Отсутствие Команд в очереди потока не должно требовать значительных затрат процессорного времени. Значительными считаются затраты, которые зависят от времени простоя потока.

Написать проверку, которая гарантирует правильное выполнение команд HardStop и SoftStop.
